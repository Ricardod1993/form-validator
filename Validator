<?php
	namespace Lib;
	use Datetime;

	class Validator
	{
		private $rules = [], $messages = [], $has_errors = false, $has_rules = false;
		public static $errors = []; 


		public function setRules($rules){
			$this->has_rules = true;
			$this->rules = $rules;
		}

		public function setMessages($messages){
			if($this->has_rules == true){
				$this->messages = $messages;
			}else{
				return false;
			}
		}	

		private function setError($key, $error){
			if(!isset(self::$errors[$key])){
				self::$errors[$key] = $error;
				$this->has_errors = true;
			}
		}

		public static function getError($key){
			if(isset(self::$errors[$key])) return self::$errors[$key]; else return false;
		}

		public static function getValue($key){
			if(isset($_POST[$key])) return $_POST[$key];
		}




		private function setRequired($value){
			return strlen($value) == 0 ? false : true;
		}

		private function setEmail($value){
			return !empty($value) && filter_var($value, FILTER_VALIDATE_EMAIL) == false ? false : true;
		}

		private function setDate($date, $format = 'Y-m-d H:i:s'){
			if(!empty($date)){
	    		$d = DateTime::createFromFormat($format, $date);
	   			return $d && $d->format($format) == $date;
	   		}else{
	   			return true;
	   		}
		}

		public function setTime($value){
			return !empty($value) && !preg_match("/^[0-9]+:[0-9]{2}$/", $value) ? false : true;
		}

		private function setMaxFileSize($file, $size){
			return isset($file["tmp_name"]) && filesize($file["tmp_name"]) > $size ? false : true;
		}

		private function setFileExtension($file, $extensions){
			$allowed = explode(", ", $extensions);
			return !empty($file["name"]) && !in_array(pathinfo($file["name"], PATHINFO_EXTENSION), $allowed) ? false : true;
		}

		private function setMatch($value, $key){
			return isset($_POST[$key]) && !empty($value) && $value != $_POST[$key] ? false : true;
		}

		private function setNumber($value){
			return !empty($value) && !is_numeric($value) ? false : true;
		}

		private function setMinLength($value, $length){
			return strlen($value) < $length ? false : true;
		}

		private function setMaxLength($value, $length){
			return strlen($value) > $length ? false : true;
		}




		public function validate(){
			if($this->has_rules == true){
				foreach ($this->rules as $key => $rule) {
					if(isset($_POST[$key]) || isset($_FILES[$key])){

						foreach ($rule as $kk => $r) {
							$function = "set".ucfirst($kk);

							if(method_exists($this, $function)){
								if(isset($_FILES[$key])) $value = $_FILES[$key]; else if(isset($_POST[$key])) $value = $_POST[$key];

								$result = call_user_func_array(array($this, $function), array($value, $r));
								
								if($result == false){
									if(isset($this->messages[$key][$kk])){
										$this->setError($key, $this->messages[$key][$kk]);
									}
								}
							}
						}
					}
				}

				return $this->has_errors == true ? false : true;
			}else{
				return false;
			}
		}
	}

?>
